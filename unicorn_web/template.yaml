# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31
Description: >
  Unicorn Web Service - web interface. Add, list and get details for Unicorn Properties.

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - ES4000 # Rule disabled because the CatchAll Rule doesn't need a DLQ
        - ES6000 # Rule disabled because SQS DLOs don't need a RedrivePolicy
        - WS2001 # Rule disabled because check does not support !ToJsonString transform
        - ES1001 # Rule disabled because our Lambda functions don't need DestinationConfig.OnFailure
        - W3002

Parameters:
  Stage:
    Type: String
    Default: local
    AllowedValues:
      - local
      - dev
      - prod

Mappings:
  LogsRetentionPeriodMap:
    local:
      Days: 3
    dev:
      Days: 3
    prod:
      Days: 14
  Constants:
    ProjectName:
      Value: "AWS Serverless Developer Experience"

Conditions:
  IsProd: !Equals [!Ref Stage, Prod]

Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.11
    MemorySize: 128
    Timeout: 15
    Tracing: Active
    Architectures:
      - x86_64
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref WebTable
        EVENT_BUS: !Ref UnicornWebEventBus
        SERVICE_NAMESPACE: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"
        POWERTOOLS_SERVICE_NAME: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"
        POWERTOOLS_TRACE_DISABLED: "false" # Explicitly disables tracing, default
        POWERTOOLS_LOGGER_LOG_EVENT: !If [IsProd, "false", "true"] # Logs incoming event, default
        POWERTOOLS_LOGGER_SAMPLE_RATE: !If [IsProd, "0.1", "0"] # Debug log sampling percentage, default
        POWERTOOLS_METRICS_NAMESPACE: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"
        POWERTOOLS_LOG_LEVEL: INFO # Log level for Logger (INFO, DEBUG, etc.), default
    Tags:
      stage: !Ref Stage
      project: !FindInMap [Constants, ProjectName, Value]
      namespace: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"

Resources:
  #### SSM PARAMETERS
  # Services share their event bus name and arn
  UnicornWebEventBusParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /uni-prop/${Stage}/UnicornWebEventBus
      Value: !GetAtt UnicornWebEventBus.Name

  UnicornWebEventBusArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /uni-prop/${Stage}/UnicornWebEventBusArn
      Value: !GetAtt UnicornWebEventBus.Arn

  ##### LAMBDA FUNCTIONS
  # Handle Search and Property details requests from API
  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/search_service/
      Handler: property_search_function.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WebTable

  # Log group for the SearchFunction
  SearchFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  # Process queued API requests to approve properties from UnicornWebIngestQueue
  RequestApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/approvals_service/
      Handler: request_approval_function.lambda_handler
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref UnicornWebEventBus
        - DynamoDBReadPolicy:
            TableName: !Ref WebTable
      Events:
        IngestQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UnicornWebIngestQueue.Arn
            BatchSize: 1
            Enabled: true
            ScalingConfig:
              MaximumConcurrency: 5

  # Log group for the RequestApprovalFunction
  RequestApprovalFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${RequestApprovalFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  # Respond to PublicationEvaluationCompleted events from Unicorn Web EventBus
  PublicationApprovedEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/approvals_service/
      Handler: publication_approved_event_handler.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref WebTable
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
      Events:
        ApprovalEvent:
          Type: EventBridgeRule
          Properties:
            RuleName: unicorn.web-PublicationEvaluationCompleted
            EventBusName: !Ref UnicornWebEventBus
            Pattern:
              source:
                - !Ref UnicornWebEventBus
              detail-type:
                - PublicationEvaluationCompleted

  # Log group for the PublicationApprovedEventHandlerFunction
  PublicationApprovedEventHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PublicationApprovedEventHandlerFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  #### API GATEWAY REST API
  UnicornWebApi:
    Type: AWS::Serverless::Api
    DependsOn: UnicornWebApiGwAccountConfig
    Properties:
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      MethodSettings:
        - MetricsEnabled: true
          ResourcePath: /*
          HttpMethod: "*"
          LoggingLevel: !If
            - IsProd
            - ERROR
            - INFO
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt UnicornWebApiLogGroup.Arn
        Format: !ToJsonString
          requestId: $context.requestId
          integration-error: $context.integration.error
          integration-status: $context.integration.status
          integration-latency: $context.integration.latency
          integration-requestId: $context.integration.requestId
          integration-integrationStatus: $context.integration.integrationStatus
          response-latency: $context.responseLatency
          status: $context.status
      DefinitionBody: !Transform
        Name: "AWS::Include"
        Parameters:
          Location: "api.yaml"
      Tags:
        stage: !Ref Stage
        project: !FindInMap [Constants, ProjectName, Value]
        namespace: Unicorn Web Service

  UnicornWebApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt UnicornWebApiGwAccountConfigRole.Arn

  # API GW IAM roles
  UnicornWebApiGwAccountConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  UnicornWebApiIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: AllowSqsIntegration
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Resource: !GetAtt UnicornWebIngestQueue.Arn
        - PolicyName: AllowLambdaInvocation
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SearchFunction.Arn

  # API GW CloudWatch Logs Group, logs all requests from API Gateway
  UnicornWebApiLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  #### INGEST QUEUES
  # Queue API Gateway requests to be processed by RequestApprovalFunction
  UnicornWebIngestQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub UnicornWebIngestQueue-${Stage}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UnicornWebIngestDLQ.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 20
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"

  # DeadLetterQueue for UnicornWebIngestQueue. Contains messages that failed to be processed
  UnicornWebIngestDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      QueueName: !Sub UnicornWebIngestDLQ-${Stage}
      Tags:
        - Key: stage
          Value: !Ref Stage
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"

  ##### DYNAMODB
  # Persists Property details in DynamoDB
  WebTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"
        - Key: stage
          Value: !Ref Stage

  #### EVENT BUS
  # Event bus for Unicorn Web Service used to publish and consume events
  UnicornWebEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub UnicornWebBus-${Stage}

  # Event bus policy to restrict who can publish events (should only be services from UnicornWebNamespace)
  UnicornWebEventBusPublishPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref UnicornWebEventBus
      StatementId: !Sub WebPublishEventsPolicy-${Stage}
      Statement:
        Effect: Allow
        Principal:
          AWS:
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        Action: events:PutEvents
        Resource: !GetAtt UnicornWebEventBus.Arn
        Condition:
          StringEquals:
            events:source:
              - !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"

  # Catchall rule used for development purposes.
  UnicornWebCatchAllRule:
    Type: AWS::Events::Rule
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - ES4000
    Properties:
      Name: web.catchall
      Description: Catch all events published by the web service.
      EventBusName: !Ref UnicornWebEventBus
      EventPattern:
        account:
          - !Ref AWS::AccountId
        source:
          - !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornContractsNamespace}}"
          - !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornPropertiesNamespace}}"
          - !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"
      State: ENABLED #You may want to disable this rule in production
      Targets:
        - Arn: !GetAtt UnicornWebCatchAllLogGroup.Arn
          Id: !Sub UnicornContractsCatchAllLogGroupTarget-${Stage}

  # CloudWatch log group used to catch all events
  UnicornWebCatchAllLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub
        - "/aws/events/${Stage}/${NS}-catchall"
        - Stage: !Ref Stage
          NS: !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  # Permissions to allow EventBridge to send logs to CloudWatch
  EventBridgeCloudWatchLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub EvBToCWLogs-${AWS::StackName}
      # Note: PolicyDocument has to be established this way. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policydocument
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "delivery.logs.amazonaws.com",
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${UnicornWebCatchAllLogGroup.Arn}"
              ]
            }
          ]
        }

  #### CLOUDFORMATION NESTED STACKS
  EventSchemasStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: "integration/event-schemas.yaml"
      Parameters:
        Stage: !Ref Stage
  SubscriberPoliciesStack:
    Type: AWS::Serverless::Application
    DependsOn:
      - UnicornWebEventBusParam
    Properties:
      Location: "integration/subscriber-policies.yaml"
      Parameters:
        Stage: !Ref Stage
  SubscriptionsStack:
    Type: AWS::Serverless::Application
    DependsOn:
      - UnicornWebEventBusArnParam
    Properties:
      Location: "integration/subscriptions.yaml"
      Parameters:
        Stage: !Ref Stage

Outputs:
  BaseUrl:
    Description: Web service API endpoint
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
  ApiUrl:
    Description: Web service API endpoint
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/"

  ApiSearchPropertiesByCity:
    Description: "GET request to list all properties in a given city"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/search/{country}/{city}"
  ApiSearchPropertiesByStreet:
    Description: "GET request to list all properties in a given street"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/search/{country}/{city}/{street}"
  ApiPropertyApproval:
    Description: "POST request to add a property to the database"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/request_approval"
  ApiPropertyDetails:
    Description: "GET request to get the full details of a single property"
    Value: !Sub "https://${UnicornWebApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Stage}/properties/{country}/{city}/{street}/{number}"

  IngestQueueUrl:
    Description: URL for the Ingest SQS Queue
    Value: !GetAtt UnicornWebIngestQueue.QueueUrl

  WebTableName:
    Description: Name of the DynamoDB Table for Unicorn Web
    Value: !Ref WebTable

  SearchFunctionArn:
    Description: Search function ARN
    Value: !GetAtt SearchFunction.Arn
  RequestApprovalFunctionArn:
    Description: Approval function ARN
    Value: !GetAtt RequestApprovalFunction.Arn
  PublicationApprovedEventHandlerFunctionArn:
    Description: Publication evaluation event handler function ARN
    Value: !GetAtt PublicationApprovedEventHandlerFunction.Arn

  #### EVENT BRIDGE OUTPUTS
  UnicornWebEventBusName:
    Value: !GetAtt UnicornWebEventBus.Name

  #### CLOUDWATCH LOGS OUTPUTS
  UnicornWebCatchAllLogGroupName:
    Description: Log all events on the service's EventBridge Bus
    Value: !Ref UnicornWebCatchAllLogGroup
